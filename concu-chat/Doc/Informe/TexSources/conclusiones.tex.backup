\section{Conclusiones}

A medida que se avanzó en la investigación sobre mecanismos de comunicación entre procesos en Unix se
analizaron ventajas o mejores y desventajas que proveía cada uno. En un comienzo se utilizó
memoria compartida y semaforos para sincronizar la misma. Como ya se dijo en la sección de diseño, esta
solución traía problemas por el tamaño fijo de la memoria. Luego se pensó utilizando tuberías, pero en este
caso el problema rondaba por la sincronización en el envío de los mensajes. Finalmente se terminó usando
cola de mensajes ya que permitía enviar mensajes de tamaño variable sincronizados.

Por otro lado, se discutió cómo era la forma correcta de dividir en procesos a un programa concurrente. El 
principal problema estaba relacionado con que la memoria no era compartida como en el caso de los hilos livianos.
En ese caso era muy simple pensar ya que todos los recursos en común dentro de la aplicación se encontrarían 
en un mismo espacio de direcciones. Finalmente, como ya se analizó en el sección de diseño, se decidió separar
al módulo cliente en dos procesos. Uno muy simple, el cual tenía como única función leer comandos de teclado
y enviarlos a un procesos principal encargado de interpretar dichos comandos. En el caso del servidor, se optó 
por un sólo proceso encargado de recibir peticiones, atenderlas y responderlas a medida que iban llegando.

      